{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.js","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHNC,G,MAAW,SAACR,GAAD,OACvB,qBAAKC,UAAU,YAAf,SAEED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCLVM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,uBAAOZ,UAAU,SAChBa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCwCrCG,G,wDAtCb,aAAc,IAAD,8BACX,gBAgBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAftC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAY,IALH,E,qDAWb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,oBAOzC,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAEnG,OACE,sBAAK9B,UAAU,MAAf,UACA,mDACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAYoB,W,GAlCVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9eec785b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './card.css'\r\n\r\nexport const Card = (props) => (\r\n <div className='card-container'>\r\n <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n <h2>{props.monster.name}</h2>\r\n <p>{props.monster.email}</p>\r\n </div>\r\n)","import React from 'react';\r\n\r\nimport { Card } from '../card/card';\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) =>(\r\n <div className='card-list'>\r\n  {\r\n   props.monsters.map(monster => (\r\n    <Card key={monster.id} monster={monster}/>\r\n  ))}\r\n </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) =>(\r\n <input className='search'\r\n  type=\"search\" placeholder={placeholder} onChange={handleChange} \r\n />\r\n);","import React, { Component } from 'react';\n\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\nimport './App.css';\n\nclass App extends Component{\n\n  constructor(){\n    super();\n\n    this.state={\n      monsters:[],\n      searchField:''\n    }\n\n    // this.handleChange = this.handleChange.bind(this);\n  }\n  \n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response =>response.json())\n    .then(users => this.setState({monsters:users}))\n  }\n\n  handleChange = (e) =>{\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ) \n    return (\n      <div className=\"App\">\n      <h1> Monsters Rolodex</h1>\n      <SearchBox\n      placeholder='Search Monsters'\n      handleChange={this.handleChange}\n      />\n      <CardList monsters = {filteredMonters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}